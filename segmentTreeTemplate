#include <iostream>
using namespace std;

int arr[100005],seg[4*100005];

void build(int idx,int low,int high)
{
    if(low==high)
    {
        seg[idx]=arr[low];
        return;
    }

    int mid=(low+high)/2;

    build(2*idx+1,low,mid);
    build(2*idx+2,mid+1,high);

    seg[idx]=max(seg[2*idx+1],seg[2*idx+2]);
}
int query(int idx,int low,int high,int l,int r)
{
    if(low>=l && high<=r) //completely lie
    return seg[idx];

    if(high<l || low>r) //does not lie at all
    return INT_MIN;

    int left=query(2*idx+1,low,mid,l,r);
    int right=query(2*idx+2,mid+1,high,l,r);

    return max(left,right);
}
void pointUpdate(int idx,int low,int high,int node,int val)
{
    if(low==high)
    {
        seg[idx]+=val;
        arr[low]+=val;
        return;
    }
    int mid=(low+high)/2;
    if(node<=mid && node>=low)
    pointUpdate(2*idx+1,low,mid,val);
    else
    pointUpdate(2*idx+2,mid+1,high,val);

    seg[idx]=seg[2*idx+1]+seg[2*idx+2];
}

void rangeUpdate(int idx,int low,int high,int l,int r,int val)
{
    if(lazy[idx]!=0)
    {
        seg[idx]+=(high-low+1)*lazy[idx];

        if(low!=high)
        {
            lazy[2*idx+1]+=lazy[idx];
            lazy[2*idx+2]+=lazy[idx];
        }
        lazy[idx]=0;
    }

    if(r<low || l>high || low>high)
    return;

    if(low<=l && high<=r)
    {
        seg[idx]+=(high-low+1)*val;
        if(low!=high)
        {
            lazy[2*idx+1]+=val;
            lazy[2*idx+2]+=val; 
        }
        return;
    }

    int mid=(left+right)/2;

    rangeUpdate(2*idx+1,low,mid,l,r,val);
    rangeUpdate(2*idx+2,mid+1,r,l,r,val);

    seg[idx]=seg[2*idx+1]+seg[2*idx+2];
}
int main() 
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>arr[i];

    build(0,0,n-1);

    int q;
    cin>>q;
    while(q--)
    {
        int l,r;
        cin>>l>>r;
        cout<<query(0,0,n-1,l,r)<<endl; 
    }
}

